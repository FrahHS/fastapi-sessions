{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI-Sessions \u00b6 Documentation: https://jordanisaacs.github.io/fastapi-sessions Source Code: https://github.com/jordanisaacs/fastapi=-sessions Quickly add session authentication to your FastAPI project. FastAPI Sessions is designed to be user friendly and customizable. Features \u00b6 [x] Dependency injection to protect the routes you want [x] Timestamp signed session IDs with itsdangerous [x] Compabitibility with OpenAPI docs using APIKeyCookie [x] Pydantic models for verifying session data [x] Abstrast session backend so you can build one that fits your needs [x] Currently included backends [x] In memory Usage More info coming. class SessionData ( BaseModel ): username : str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , data_model = SessionData , backend = InMemoryBackend (), scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" ) async def secure_thing ( session : Tuple [ SessionData , str ] = Depends ( test_session )): if session is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session [ 0 ]} @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response ): test_user = SessionData ( username = username ) await test_session . start_and_set_session ( test_user , response ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session : Optional [ Tuple [ SessionData , str ]] = Depends ( test_session )): await test_session . end_and_delete_session ( session , response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session }","title":"About"},{"location":"#fastapi-sessions","text":"Documentation: https://jordanisaacs.github.io/fastapi-sessions Source Code: https://github.com/jordanisaacs/fastapi=-sessions Quickly add session authentication to your FastAPI project. FastAPI Sessions is designed to be user friendly and customizable.","title":"FastAPI-Sessions"},{"location":"#features","text":"[x] Dependency injection to protect the routes you want [x] Timestamp signed session IDs with itsdangerous [x] Compabitibility with OpenAPI docs using APIKeyCookie [x] Pydantic models for verifying session data [x] Abstrast session backend so you can build one that fits your needs [x] Currently included backends [x] In memory Usage More info coming. class SessionData ( BaseModel ): username : str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , data_model = SessionData , backend = InMemoryBackend (), scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" ) async def secure_thing ( session : Tuple [ SessionData , str ] = Depends ( test_session )): if session is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session [ 0 ]} @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response ): test_user = SessionData ( username = username ) await test_session . start_and_set_session ( test_user , response ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session : Optional [ Tuple [ SessionData , str ]] = Depends ( test_session )): await test_session . end_and_delete_session ( session , response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session }","title":"Features"},{"location":"installation/","text":"Installation \u00b6 To get started use: pip install fastapi_sessions Includes InMemoryBackend and the abstract SessionBackend","title":"Installation"},{"location":"installation/#installation","text":"To get started use: pip install fastapi_sessions Includes InMemoryBackend and the abstract SessionBackend","title":"Installation"},{"location":"guide/backends/","text":"","title":"Backends"},{"location":"guide/cookies/","text":"Make a Cookie \u00b6 To do","title":"Cookies"},{"location":"guide/cookies/#make-a-cookie","text":"To do","title":"Make a Cookie"},{"location":"guide/sessions/","text":"Session Based Authentication \u00b6 To do","title":"Sessions"},{"location":"guide/sessions/#session-based-authentication","text":"To do","title":"Session Based Authentication"},{"location":"guide/usage/","text":"Example \u00b6 To document from typing import Tuple , Optional , Any from fastapi_sessions import SessionCookie from fastapi_sessions.backends import SessionBackend , InMemoryBackend from fastapi_sessions.typings import SessionInfo from pydantic import BaseModel from fastapi import FastAPI , Depends , Response , HTTPException test_app = FastAPI () class SessionData ( BaseModel ): username : str class Message ( BaseModel ): detail = str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , data_model = SessionData , backend = InMemoryBackend (), scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" , responses = { 403 : { \"model\" : Any }}) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session [ 0 ]} @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): test_user = SessionData ( username = username ) await test_session . start_and_set_session ( test_user , response ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): await test_session . end_and_delete_session ( session_info , response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Usage"},{"location":"guide/usage/#example","text":"To document from typing import Tuple , Optional , Any from fastapi_sessions import SessionCookie from fastapi_sessions.backends import SessionBackend , InMemoryBackend from fastapi_sessions.typings import SessionInfo from pydantic import BaseModel from fastapi import FastAPI , Depends , Response , HTTPException test_app = FastAPI () class SessionData ( BaseModel ): username : str class Message ( BaseModel ): detail = str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , data_model = SessionData , backend = InMemoryBackend (), scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" , responses = { 403 : { \"model\" : Any }}) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session [ 0 ]} @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): test_user = SessionData ( username = username ) await test_session . start_and_set_session ( test_user , response ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): await test_session . end_and_delete_session ( session_info , response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Example"}]}