{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI-Sessions \u00b6 Documentation: https://jordanisaacs.github.io/fastapi-sessions/ Source Code: https://github.com/jordanisaacs/fastapi-sessions/ Quickly add session authentication to your FastAPI project. FastAPI Sessions is designed to be user friendly and customizable. Features \u00b6 Dependency injection to protect the routes you want Timestamp signed session IDs with itsdangerous Compabitibility with OpenAPI docs using APIKeyCookie Pydantic models for verifying session data Abstract session backend so you can build one that fits your needs Currently included backends In memory Upcoming: Documentation and user guides Hassle free CSRF Tokens More backends! This project was started on April 3rd and progress is ongoing. Follow the repo for updates! Installation \u00b6 pip install fastapi - sessions Guide \u00b6 Check out the guide to building and using session based authentication with fastapi-sessions: https://jordanisaacs.github.io/fastapi-sessions/guide/getting_started/","title":"About"},{"location":"#fastapi-sessions","text":"Documentation: https://jordanisaacs.github.io/fastapi-sessions/ Source Code: https://github.com/jordanisaacs/fastapi-sessions/ Quickly add session authentication to your FastAPI project. FastAPI Sessions is designed to be user friendly and customizable.","title":"FastAPI-Sessions"},{"location":"#features","text":"Dependency injection to protect the routes you want Timestamp signed session IDs with itsdangerous Compabitibility with OpenAPI docs using APIKeyCookie Pydantic models for verifying session data Abstract session backend so you can build one that fits your needs Currently included backends In memory Upcoming: Documentation and user guides Hassle free CSRF Tokens More backends! This project was started on April 3rd and progress is ongoing. Follow the repo for updates!","title":"Features"},{"location":"#installation","text":"pip install fastapi - sessions","title":"Installation"},{"location":"#guide","text":"Check out the guide to building and using session based authentication with fastapi-sessions: https://jordanisaacs.github.io/fastapi-sessions/guide/getting_started/","title":"Guide"},{"location":"sessions/","text":"All About Sessions \u00b6 To do","title":"Sessions"},{"location":"sessions/#all-about-sessions","text":"To do","title":"All About Sessions"},{"location":"guide/backends/","text":"Backends \u00b6 To do","title":"Backends"},{"location":"guide/backends/#backends","text":"To do","title":"Backends"},{"location":"guide/cookies/","text":"Make a Cookie \u00b6 To do","title":"Cookies"},{"location":"guide/cookies/#make-a-cookie","text":"To do","title":"Make a Cookie"},{"location":"guide/getting_started/","text":"Getting started \u00b6 Install FastAPI Sessions \u00b6 The first step is to make sure you have FastAPI installed, along with Uvicorn for testing your API. If this sounds unfamiliar to you, first check out the FastAPI tutorial Assuming you have your environment ready, all you need to do is run the code below. pip install fastapi - sessions Basic Usage \u00b6 Getting up and running with FastAPI Sessions is extremely simple. There are three main components you need: Session Data - A pydantic model that specifies what data will be behind a session (e.g. username) SessionBackend Class - Where the session data is actually being stored. SessionCookie Class - The heavy lifter, it handles all the processing of the sessions Now lets take a quick look at a quick API. More details on configurations and design choices will be covered later. Session Data \u00b6 Its as simple as creating a pydantic model. No catches! from pydantic import BaseModel class SessionData ( BaseModel ): username : str Session Backend \u00b6 We will use the simple InMemoryBackend() right now. It stores session data in the server's memory. There are more options that we will go into in the backend section. from fastapi_sessions.backends import InMemoryBackend backend = InMemoryDB () Session Cookie \u00b6 Now we are ready to create our session cookie. It is extremely simple. Just give it a name, a secret key, and pass in our specified data model and backend. Also set auto_error=False , what that does will be explained in the cookies section. Now we are ready to authenticate! from fastapi_sessions import SessionCookie session = SessionCookie ( name = \"session\" , secret_key = \"secret\" , data_model = SessionData , backend = InMemoryBackend (), auto_error = False ) Using Sessions \u00b6 Now it is as simple as using FastAPI's dependency injection system to protect your routes! Furthermore FastAPI Sessions is compatible with the OpenAPI specs so it will show up in your docs as authenticated routes. from typing import Tuple , Optional , Any from fastapi import FastAPI , Depends , Response , HTTPException from fastapi_sessions import SessionInfo test_app = FastAPI () @test_app . get ( \"/secure\" ) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure!\" } To create a session (e.g. login), just call session.create_session(user, response) and your user has a session. @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): test_user = SessionData ( username = username ) await session . create_session ( test_user , response ) return { \"message\" : \"You now have a session!\" } To end a session (e.g. logout), just call session.end_session(session_id, response) and the session is over. @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): if not session_info : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) await test_session . end_session ( session_info [ 0 ], response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info } Putting it all together \u00b6 Now lets put it all back together to see our session based authentication app. Warning While FastAPI-Sessions makes creating session based authentication easy, it is still a lower level library that lets you make design decisions with security implications. Please read through all the docs, especially Sessions (forthcoming), and do your own research if you have not worked with cookies and sessions for authentication before. from typing import Tuple , Optional , Any from pydantic import BaseModel from fastapi import FastAPI , Depends , Response , HTTPException from fastapi_sessions import SessionCookie , SessionInfo from fastapi_sessions.backends import InMemoryBackend test_app = FastAPI () class SessionData ( BaseModel ): username : str class BadSessionData ( BaseModel ): fakename : str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , backend = InMemoryBackend (), data_model = SessionData , scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" ) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session_data } @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): old_session = None if session_info : old_session = session_info [ 0 ] test_user = SessionData ( username = username ) await test_session . create_session ( test_user , response , old_session ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): if not session_info : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) await test_session . end_session ( session_info [ 0 ], response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Getting Started"},{"location":"guide/getting_started/#getting-started","text":"","title":"Getting started"},{"location":"guide/getting_started/#install-fastapi-sessions","text":"The first step is to make sure you have FastAPI installed, along with Uvicorn for testing your API. If this sounds unfamiliar to you, first check out the FastAPI tutorial Assuming you have your environment ready, all you need to do is run the code below. pip install fastapi - sessions","title":"Install FastAPI Sessions"},{"location":"guide/getting_started/#basic-usage","text":"Getting up and running with FastAPI Sessions is extremely simple. There are three main components you need: Session Data - A pydantic model that specifies what data will be behind a session (e.g. username) SessionBackend Class - Where the session data is actually being stored. SessionCookie Class - The heavy lifter, it handles all the processing of the sessions Now lets take a quick look at a quick API. More details on configurations and design choices will be covered later.","title":"Basic Usage"},{"location":"guide/getting_started/#session-data","text":"Its as simple as creating a pydantic model. No catches! from pydantic import BaseModel class SessionData ( BaseModel ): username : str","title":"Session Data"},{"location":"guide/getting_started/#session-backend","text":"We will use the simple InMemoryBackend() right now. It stores session data in the server's memory. There are more options that we will go into in the backend section. from fastapi_sessions.backends import InMemoryBackend backend = InMemoryDB ()","title":"Session Backend"},{"location":"guide/getting_started/#session-cookie","text":"Now we are ready to create our session cookie. It is extremely simple. Just give it a name, a secret key, and pass in our specified data model and backend. Also set auto_error=False , what that does will be explained in the cookies section. Now we are ready to authenticate! from fastapi_sessions import SessionCookie session = SessionCookie ( name = \"session\" , secret_key = \"secret\" , data_model = SessionData , backend = InMemoryBackend (), auto_error = False )","title":"Session Cookie"},{"location":"guide/getting_started/#using-sessions","text":"Now it is as simple as using FastAPI's dependency injection system to protect your routes! Furthermore FastAPI Sessions is compatible with the OpenAPI specs so it will show up in your docs as authenticated routes. from typing import Tuple , Optional , Any from fastapi import FastAPI , Depends , Response , HTTPException from fastapi_sessions import SessionInfo test_app = FastAPI () @test_app . get ( \"/secure\" ) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure!\" } To create a session (e.g. login), just call session.create_session(user, response) and your user has a session. @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): test_user = SessionData ( username = username ) await session . create_session ( test_user , response ) return { \"message\" : \"You now have a session!\" } To end a session (e.g. logout), just call session.end_session(session_id, response) and the session is over. @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): if not session_info : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) await test_session . end_session ( session_info [ 0 ], response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Using Sessions"},{"location":"guide/getting_started/#putting-it-all-together","text":"Now lets put it all back together to see our session based authentication app. Warning While FastAPI-Sessions makes creating session based authentication easy, it is still a lower level library that lets you make design decisions with security implications. Please read through all the docs, especially Sessions (forthcoming), and do your own research if you have not worked with cookies and sessions for authentication before. from typing import Tuple , Optional , Any from pydantic import BaseModel from fastapi import FastAPI , Depends , Response , HTTPException from fastapi_sessions import SessionCookie , SessionInfo from fastapi_sessions.backends import InMemoryBackend test_app = FastAPI () class SessionData ( BaseModel ): username : str class BadSessionData ( BaseModel ): fakename : str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , backend = InMemoryBackend (), data_model = SessionData , scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" ) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session_data } @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): old_session = None if session_info : old_session = session_info [ 0 ] test_user = SessionData ( username = username ) await test_session . create_session ( test_user , response , old_session ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): if not session_info : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) await test_session . end_session ( session_info [ 0 ], response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Putting it all together"},{"location":"guide/usage/","text":"Example \u00b6 To document from typing import Tuple , Optional , Any from pydantic import BaseModel from fastapi import FastAPI , Depends , Response , HTTPException from fastapi_sessions import SessionCookie , SessionInfo from fastapi_sessions.backends import InMemoryBackend test_app = FastAPI () class SessionData ( BaseModel ): username : str class BadSessionData ( BaseModel ): fakename : str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , backend = InMemoryBackend (), data_model = SessionData , scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" ) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session_data } @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): old_session = None if session_info : old_session = session_info [ 0 ] test_user = SessionData ( username = username ) await test_session . create_session ( test_user , response , old_session ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): if not session_info : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) await test_session . end_session ( session_info [ 0 ], response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Usage"},{"location":"guide/usage/#example","text":"To document from typing import Tuple , Optional , Any from pydantic import BaseModel from fastapi import FastAPI , Depends , Response , HTTPException from fastapi_sessions import SessionCookie , SessionInfo from fastapi_sessions.backends import InMemoryBackend test_app = FastAPI () class SessionData ( BaseModel ): username : str class BadSessionData ( BaseModel ): fakename : str test_session = SessionCookie ( name = \"session\" , secret_key = \"helloworld\" , backend = InMemoryBackend (), data_model = SessionData , scheme_name = \"Test Cookies\" , auto_error = False ) @test_app . get ( \"/secure\" ) async def secure_thing ( session_data : Optional [ SessionInfo ] = Depends ( test_session )): if session_data is None : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) return { \"message\" : \"You are secure\" , \"user\" : session_data } @test_app . post ( \"/get_session\" ) async def login ( username : str , response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): old_session = None if session_info : old_session = session_info [ 0 ] test_user = SessionData ( username = username ) await test_session . create_session ( test_user , response , old_session ) return { \"message\" : \"You now have a session\" , \"user\" : test_user } @test_app . post ( \"/leave_session\" ) async def logout ( response : Response , session_info : Optional [ SessionInfo ] = Depends ( test_session )): if not session_info : raise HTTPException ( status_code = 403 , detail = \"Not authenticated\" ) await test_session . end_session ( session_info [ 0 ], response ) return { \"message\" : \"You now don't have a session\" , \"user\" : session_info }","title":"Example"}]}